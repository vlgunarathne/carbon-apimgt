<%
include("/jagg/jagg.jag");
var carbon = require('carbon');
(function () {
    var site = require("/site/conf/site.json");
    var ssoEnabled = site.ssoConfiguration.enabled;
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, name, version, provider,rating, result, username,
            user = jagg.getUser(),
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action");

    var validation = {
        "action": { type: "safetext"},
        "rating": { type:"number" },
    };

    var validation_errors = jagg.validateInputs(validation);

    if(validation_errors != true){
            print({
                error:true,
                message: msg.error.invalidInputs(validation_errors)
            });        
    }else if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });
    }            
    else if (action == "addRating" && request.getMethod() == 'POST') {
        if (!user) {
            if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        name = request.getParameter("name");
        version = request.getParameter("version");
        provider = request.getParameter("provider");
        rating = parseInt(request.getParameter("rating"), 10);
        username = user.username;

        mod = jagg.module("rating");
        result = mod.addRating({
            name:name,
            version:version,
            provider:provider
        }, rating);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                rating:result.rating
            }
        }
        print(obj);
    } else if (action == "removeRating" && request.getMethod() == 'POST') {
        if (!user) {
           if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        name = request.getParameter("name");
        version = request.getParameter("version");
        provider = request.getParameter("provider");
        username = user.username;

        mod = jagg.module("rating");
        result = mod.removeRating({
            name:name,
            version:version,
            provider:provider
        });

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                rating:result.rating
            }
        }
        print(obj);
    }  else  if (action == "isRatingActivated") {
        
        mod = jagg.module("rating");
        result = mod.isRatingActivated();

        if (result.error) {
            obj = {
                error:result.error               
            };
        } else {
            obj = {
                error:false,
                allow:result.allow
            }
        }
        print(obj);
      } else if (action == "getAPIEndpointURLs") {
	    if (!user) {
		   if(!ssoEnabled){
			print({
			    error:true,
		            message:msg.error.loginRequired(action)
		    	});
		    }
	    return;
           }

	   name = request.getParameter("name");
           version = request.getParameter("version");
           provider = request.getParameter("provider");
	   username = user.username;
           
	   mod = jagg.module("api");
	   result = mod.getAPIEndpointURLs({
             name:name,
             version:version,
             provider:provider
           }, username);
	
	   if (result.error) {
            	obj = {
                	error:result.error,
                	message:msg.error.authError(action, username)
            	};
           } else {
            	obj = {
                	error:false,
                	endpointURLs:result.endpointURLs
            	}
           }
           print(obj);

     }  else if (action == "getCustomOAuthHeader" && request.getMethod() == 'POST') {
            var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
            var apiUtil = new APIUtil();
            var tenantVal = request.getParameter("tenant");
            if (tenantVal == null) {
                tenantVal = "carbon.super";
            }
            var name = request.getParameter("name");
            var version = request.getParameter("version");
            var provider = request.getParameter("provider");
            var tenantID = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService').getTenantManager().getTenantId(tenantVal);
            var customOAuth2Header = apiUtil.getOAuthConfiguration(tenantID, "CustomOAuth2Header", provider, name, version);
            if(null == customOAuth2Header) {
                customOAuth2Header = "Authorization";
            }
            if (customOAuth2Header.error) {
                obj = {
                    error:result.error,
                    message:msg.error.authError(action, username)
                };
            }else{
                obj = {
                    error:false,
                    customHeader:customOAuth2Header
                }
            }

            print(obj);
    }
    else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());
%>
